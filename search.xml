<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android11使用HttpCanary</title>
    <url>/2022/02/12/Android11%E4%BD%BF%E7%94%A8HttpCanary/</url>
    <content><![CDATA[<blockquote>
<p>Android11更改了CA证书安装机制，为保证安全关闭了第三方应用安装证书的接口，只能通过系统设置安装证书。</p>
</blockquote>
<p><img src="https://picgo-mirage.oss-cn-hangzhou.aliyuncs.com/image/image-20220212220614649.png" alt="image-20220212220614649"></p>
<p>HttpCanary只有在安装完证书后才能导出pem密钥，这也导致其在Android11上无法使用。</p>
<p>目前的解决办法通常是从软件的缓存目录中提取出CA证书然后在设置中安装，但需要root权限才能访问<code>/data</code>目录。</p>
<p>最近发现了针对证书问题的修改版，hook证书安装验证函数，使软件得到的数据始终为已安装证书，这样就可以导出证书去设置里安装。搬运<a href="https://pan.baidu.com/s/1ojhzlOYAXKNxas22leXb1w?pwd=7q5f">文件下载地址</a>。</p>
<p>⚠️注：</p>
<ul>
<li><p>证书导出方法：</p>
<p><code>设置</code> -&gt; <code>HttpCanary根证书</code> -&gt; <code>导出HttpCanary根证书</code> -&gt; <code>Privacy Enhanced Mai(.pem)</code></p>
<p>导出位置为<code>~/HttpCanary/certs</code></p>
</li>
<li><p>设置中安装证书</p>
<p>不同品牌手机存在差异，通常在<code>安全</code>分类中，或直接在设置中搜索<code>安装证书</code>、<code>CA证书</code>等关键字。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask跨域方案</title>
    <url>/2022/02/08/Flask%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>很容易搜索到多种解决方法，暂先记录几种最简单的。</p>
</blockquote>
<h3 id="为response添加headers"><a href="#为response添加headers" class="headerlink" title="为response添加headers"></a>为response添加headers</h3><ol>
<li>使用make_response先创建响应，再给响应添加headers</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    rsp = make_response(<span class="string">&#x27;Hello world.&#x27;</span>)</span><br><span class="line">    rsp.headers[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>return响应三元组(response, status, headers)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello world&#x27;</span>, <span class="number">200</span>, &#123;<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>:<span class="string">&#x27;*&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注册请求回调添加headers"><a href="#注册请求回调添加headers" class="headerlink" title="注册请求回调添加headers"></a>注册请求回调添加headers</h3><p>当大量路由都需要允许跨域时，为每个路由逐个添加变得非常麻烦且不易维护。这时可以使用Flask提供的回调接口为请求注册回调，自动添加<code>Access-Control-Allow-Origin</code>的header。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">headers_hook</span>(<span class="params">response</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        response.headers[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 同样可以将app替换为蓝图在局部开启跨域</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Flask</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub删除所有提交历史</title>
    <url>/2022/02/04/GitHub%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>将代码保持在当前状态，清空commit history。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>创建新分支 <code>-&gt;</code> 将文件添加到新分支 <code>-&gt;</code> 提交更改 <code>-&gt;</code> 删除旧master分支 <code>-&gt;</code> 重命名新分支 <code>-&gt;</code> 强制更新仓库</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>创建新分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout --orphan latest_branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件添加到新分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交更改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -am &quot;Init new branch&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除旧master分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -D master</span><br></pre></td></tr></table></figure>
</li>
<li><p>重命名新分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -m master</span><br></pre></td></tr></table></figure>
</li>
<li><p>强制更新仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装Reids并配置</title>
    <url>/2022/02/04/Mac%E5%AE%89%E8%A3%85Reids%E5%B9%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>使用<code>Homebrew</code>安装</li>
</ul>
<p>安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/redis-6.2.6.monte</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Pouring redis-6.2.6.monterey.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To restart redis after an upgrade:</span><br><span class="line">  brew services restart redis</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  /usr/local/opt/redis/bin/redis-server /usr/local/etc/redis.conf</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/redis/6.2.6: 14 files, 2.0MB</span><br></pre></td></tr></table></figure>

<ul>
<li>下载bin文件并配置环境变量</li>
</ul>
<blockquote>
<p>日后更新(&#x2F;&#x2F;&#x2F;▽&#x2F;&#x2F;&#x2F;)</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件路径：</p>
<p><code>/usr/local/opt/redis/bin/redis-server</code>、</p>
<p><code>/usr/local/etc/redis.conf</code></p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>port 6379</code></td>
<td>指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr>
<td><code>bind 127.0.0.1</code></td>
<td>绑定的主机地址</td>
</tr>
<tr>
<td><code>databases 16</code></td>
<td>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td>
</tr>
<tr>
<td><code>save &lt;seconds&gt; &lt;changes&gt;</code></td>
<td>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td>
</tr>
<tr>
<td><code>rdbcompression yes</code></td>
<td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td>
</tr>
<tr>
<td><code>dbfilename dump.rdb</code></td>
<td>指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td><code>dir ./</code></td>
<td>指定本地数据库存放目录</td>
</tr>
<tr>
<td><code>include /path/to/local.conf</code></td>
<td>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>
</tr>
</tbody></table>
<h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><ul>
<li>查看redis进程</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps axu | grep redis</span><br></pre></td></tr></table></figure>

<ul>
<li>启动、关闭redis服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew services start redis</span><br><span class="line">brew services stop redis</span><br><span class="line">brew services restart redis</span><br></pre></td></tr></table></figure>

<ul>
<li>……</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Python使用redis</title>
    <url>/2022/02/06/Python%E4%BD%BF%E7%94%A8redis/</url>
    <content><![CDATA[<h2 id="安装Redis模块"><a href="#安装Redis模块" class="headerlink" title="安装Redis模块"></a>安装Redis模块</h2><p>Python无内置redis工具，需先安装redis模块：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install redis</span><br></pre></td></tr></table></figure>



<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">r = redis.StrictRedis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Lihua&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>redis 提供两个类 Redis 和 StrictRedis, StrictRedis 用于实现大部分官方的命令，Redis 是 StrictRedis 的子类，用于向后兼用旧版本。</p>
<p>redis 取出的结果默认是字节，可以设定 <strong>decode_responses&#x3D;True</strong> 改成字符串。</p>
<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>redis-py 使用 connection pool 来管理对一个 redis server 的所有连接，避免每次建立、释放连接的开销。</p>
<p>默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数 Redis，这样就可以实现多个 Redis 实例共享一个连接池。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br></pre></td></tr></table></figure>

<h2 id="String操作"><a href="#String操作" class="headerlink" title="String操作"></a>String操作</h2><p>TODO……</p>
<h2 id="List操作"><a href="#List操作" class="headerlink" title="List操作"></a>List操作</h2><p>TODO……</p>
<h2 id="Set操作……"><a href="#Set操作……" class="headerlink" title="Set操作……"></a>Set操作……</h2><p>TODO……</p>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="遍历全部key"><a href="#遍历全部key" class="headerlink" title="遍历全部key"></a>遍历全部key</h3><h3 id="……"><a href="#……" class="headerlink" title="……"></a>……</h3>]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>redis</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Safari正则兼容问题记录</title>
    <url>/2022/02/13/Safari%E6%AD%A3%E5%88%99%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>Halo某主题代码渲染出现问题，查看控制台发现报错如下：</p>
<p><img src="https://picgo-mirage.oss-cn-hangzhou.aliyuncs.com/image/image-20220213130754875.png" alt="image-20220213130754875"></p>
<p>定位到错误代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(?&lt;=]).+(?=\\[/)&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> noway = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(?=\\[noway])(\\S*)(\\[/noway]=?)&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> buy = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(?=\\[buy])(\\S*)(\\[/buy]=?)&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> task = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(?=\\[task])(\\S*)(\\[/task]=?)&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> warning = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(?=\\[warning])(\\S*)(\\[/warning]=?)&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>根据控制台报错，问题出现在正则匹配式上。尝试在Chrome上运行该行代码，无报错，至此可以肯定是浏览器的兼容性问题。</p>
<p>经查阅发现Safari不支持零宽断言，即<code>?&lt;=</code>、<code>?=</code>，解决办法是使用其它表达式替换零宽断言。</p>
]]></content>
      <tags>
        <tag>正则</tag>
        <tag>Safari</tag>
      </tags>
  </entry>
  <entry>
    <title>Miller-Rabin素数测试算法.md</title>
    <url>/2022/03/15/Miller-Rabin%E7%B4%A0%E6%95%B0%E6%B5%8B%E8%AF%95%E7%AE%97%E6%B3%95-md/</url>
    <content><![CDATA[<blockquote>
<p>学习RSA过程中用到了大素数，记录学习过程。</p>
</blockquote>
<p>目前没有算法能够直接生成一个素数（据本人了解），只能通过不断生成随机数直到产生素数的方法来生成。如果$n$较小，可以直接对$2$到$\sqrt{n}$ 的所有整数取模验证，但当$n$特别大时，$O(\sqrt{n})$ 复杂度耗费的大量时间是不能被接受的。此时如果牺牲部分准确度来换取时间的优化，即为Miller-Rabin算法。</p>
<p>根据百度百科，使用快速幂运算，这个算法的时间复杂度是 $O(𝑘\log^3𝑛)$ ，判错概率是$4^{-k}$，$k$为判断次数。下面为该算法的实现原理。</p>
<h2 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h2><h3 id="1-费马小定理"><a href="#1-费马小定理" class="headerlink" title="1. 费马小定理"></a>1. 费马小定理</h3><p>如果$p$是素数，且 $gcd(a, p) &#x3D; 1$ ，则有 $a^{p-1}\equiv 1 \pmod {p}$ 。</p>
<p>它的逆命题并不能推出$p$为素数，但如果不满足 $a^{p-1} \equiv 1 \pmod {p}$ 的$p$一定是合数。</p>
<h3 id="2-有限域上的平方根定理"><a href="#2-有限域上的平方根定理" class="headerlink" title="2. 有限域上的平方根定理"></a>2. 有限域上的平方根定理</h3><p>如果$p$是一个奇质数，且 $e \geq 1$ ，则方程 </p>
<p>$$<br>x^2 \equiv 1 \pmod {p^e}<br>$$</p>
<p>仅有两个根 $x&#x3D;1$ 或者 $x&#x3D;-1$ ，$\pm1$也称为1的平凡平方根。</p>
<blockquote>
<p>在 $e&#x3D;1$ 即模$p$的情况下，$x&#x3D;-1$等价于$x&#x3D;p-1$ 。</p>
<p>把 $x &#x3D; 1$ 和 $x &#x3D; p-1$ 称为“$x$对模$p$来说1的平凡平方根”不太通顺，Miller-Rabin索性测试用到这个方程：$x^2 \equiv 1 \pmod {n}$ 。如果一个数$x$满足方程$x^2 \equiv 1 \pmod {𝑛}$，但$x$不等于平凡平方根1或$n-1$ ，那么称$x$是对模n来说1的“非平凡”平方根。例如，$x&#x3D;6$ , $n&#x3D;35$ ，6是对模35来说1的非平凡平方根。</p>
<p>推论：如果对模n存在1的非平凡平方根，则n是合数。</p>
</blockquote>
<h2 id="Miller-Rabin算法"><a href="#Miller-Rabin算法" class="headerlink" title="Miller-Rabin算法"></a>Miller-Rabin算法</h2><p>判断一个大数n是否为素数时，可以利用上面的费马小定理 $a^{n-1} \equiv 1 \pmod {n}$ ，如果不满足该式，则可断定n为合数。但在该判断前可以用引理2的推理进一步增强准确性。</p>
<p>对于偶数$n-1$ ，一定可以拆分为 $n-1 &#x3D; 2 ^ s * d$ ：<br>$$<br>a ^ {n-1} &#x3D; a ^ {2 ^ {s} * d} &#x3D; (((a^d)^2)\cdots)^2<br>$$<br>从$x&#x3D;a^d$开始，依次平方s次，每次平方的时候模n。由有限域上的平方根定理可知，如果模n时结果为1，那么$x$一定是1或者$n-1$，如果不满足则n为合数。如果$x$为1的平凡平方根或模n的结果不为1，$x &#x3D; x^2$继续下一次平方，然后模n判断。</p>
<p>当平方到了s次，此时$x &#x3D; a ^ {n-1}$ ，判断$x$模n的结果是否为1。如果不为1判定n为合数，如果为1则可认为n大概率为素数。</p>
<h3 id="算法的代码实现"><a href="#算法的代码实现" class="headerlink" title="算法的代码实现"></a>算法的代码实现</h3><blockquote>
<p>在进行$a^{d} \pmod n$ 和 $x^2 \pmod n$时如果直接运算，大概率会溢出，所以需要使用快速幂和快速乘。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qMul</span><span class="params">(ll a, ll b, ll mod)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qPow</span><span class="params">(ll base, ll power, ll mod)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Miller_Rabin</span><span class="params">(ll n, <span class="keyword">int</span> repeat)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">printf</span>(<span class="string">&quot;Input a n to judge:\n&quot;</span>) &amp;&amp; <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(Miller_Rabin(n, <span class="number">10</span>) ? <span class="string">&quot;Yes\n\n&quot;</span> : <span class="string">&quot;No\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//quick multiply</span></span><br><span class="line"><span class="function">ll <span class="title">qMul</span><span class="params">(ll a, ll b, ll mod)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = (ret + a) % mod;</span><br><span class="line">        a = (a + a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//quick power</span></span><br><span class="line"><span class="function">ll <span class="title">qPow</span><span class="params">(ll base, ll power, ll mod)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (power) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>) ret = qMul(ret, base, mod);</span><br><span class="line">        base = qMul(base, base, mod);</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Miller_Rabin</span><span class="params">(ll n, <span class="keyword">int</span> repeat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ll d = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(d &amp; <span class="number">1</span>)) ++s, d &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; repeat; i++) &#123;</span><br><span class="line">        ll a = rand() % (n - <span class="number">3</span>) + <span class="number">2</span>;</span><br><span class="line">        ll x = qPow(a, d, n);</span><br><span class="line">        ll y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s; j++) &#123;</span><br><span class="line">            y = qMul(x, x, n);</span><br><span class="line">            <span class="keyword">if</span> (y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != (n - <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>素数</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>RSSI定位算法学习</title>
    <url>/2022/03/01/RSSI%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ul>
<li>K最近邻居法</li>
<li>DV-Hop法</li>
<li>质心定位算法</li>
<li>加权质心定位算法</li>
</ul>
<hr>
<ul>
<li>三边定位算法</li>
<li>AOA定位算法</li>
<li>TOA&#x2F;TDOA算法</li>
</ul>
]]></content>
      <tags>
        <tag>RSSI</tag>
        <tag>定位</tag>
      </tags>
  </entry>
  <entry>
    <title>mac OS快捷键</title>
    <url>/2022/02/14/mac-OS%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<blockquote>
<p>🍀持续更新中～</p>
</blockquote>
<h3 id="文稿快捷键"><a href="#文稿快捷键" class="headerlink" title="文稿快捷键"></a>文稿快捷键</h3><p>⌘ + ↑：文稿开头</p>
<p>⌘ + ↓：文稿末尾</p>
<p>⌘ + → ：行首（Home）</p>
<p>⌘ + ← ：行尾（End）</p>
<p>⌥  + ← ：单词首</p>
<p>⌥  + →： 单词尾</p>
<p>⌃ + A：行或段落开头</p>
<p>⌃ + E：行或段落末尾</p>
<p>⌃ + F：向前一字符</p>
<p>⌃ + B：向后一字符</p>
<p>⌃ + N：下一行</p>
<p>⌃ + P：上一行</p>
<h3 id="Mac修饰键样式"><a href="#Mac修饰键样式" class="headerlink" title="Mac修饰键样式"></a>Mac修饰键样式</h3><ul>
<li>⇪ Caps Lock</li>
<li>⌘ Command</li>
<li>⌥ Option</li>
<li>⇧ Shift</li>
<li>⌃ Control</li>
</ul>
]]></content>
      <tags>
        <tag>Mac OS</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
</search>
